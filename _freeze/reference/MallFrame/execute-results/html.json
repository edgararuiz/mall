{
  "hash": "4d27bd10a23d147c6418443bc834d1ef",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"MallFrame\"\nexecute:\n  eval: true\n  freeze: true\n---\n\n\n\n`MallFrame(self, df)`\n\nExtension to Polars that add ability to use\nan LLM to run batch predictions over a data frame\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [classify](#mall.MallFrame.classify) | Classify text into specific categories. |\n| [sentiment](#mall.MallFrame.sentiment) | Use an LLM to run a sentiment analysis |\n| [summarize](#mall.MallFrame.summarize) | Summarise the text down to a specific number of words. |\n| [translate](#mall.MallFrame.translate) | Translate text into another language. |\n\n### classify { #mall.MallFrame.classify }\n\n`MallFrame.classify(col, labels='', additional='', pred_name='classify')`\n\nClassify text into specific categories.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                                                             | Default      |\n|--------------|--------|-------------------------------------------------------------------------------------------------------------------------|--------------|\n| `col`        |        | The name of the text field to process                                                                                   | _required_   |\n| `labels`     |        | A list or a DICT object that defines the categories to classify the text as. It will return one of the provided labels. | `''`         |\n| `pred_name`  |        | A character vector with the name of the new column where the prediction will be placed                                  | `'classify'` |\n| `additional` |        | Inserts this text into the prompt sent to the LLM                                                                       | `''`         |\n\n### sentiment { #mall.MallFrame.sentiment }\n\n`MallFrame.sentiment(col, options=['positive', 'negative', 'neutral'], additional='', pred_name='sentiment')`\n\nUse an LLM to run a sentiment analysis\n\n#### Parameters\n\n| Name         | Type   | Description                                                                            | Default                               |\n|--------------|--------|----------------------------------------------------------------------------------------|---------------------------------------|\n| `col`        |        | The name of the text field to process                                                  | _required_                            |\n| `options`    |        | A list of the sentiment options to use, or a named DICT object                         | `['positive', 'negative', 'neutral']` |\n| `pred_name`  |        | A character vector with the name of the new column where the prediction will be placed | `'sentiment'`                         |\n| `additional` |        | Inserts this text into the prompt sent to the LLM                                      | `''`                                  |\n\n#### Examples\n\n::: {#8297e50d .cell execution_count=1}\n``` {.python .cell-code}\nimport mall\nimport polars as pl\ndata = mall.MallData\nreviews = data.reviews\nreviews.llm.use(options = dict(seed = 100))\nreviews.llm.sentiment(\"review\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve…</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. I…</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my …</td><td>&quot;neutral&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### summarize { #mall.MallFrame.summarize }\n\n`MallFrame.summarize(col, max_words=10, additional='', pred_name='summary')`\n\nSummarise the text down to a specific number of words.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                            | Default     |\n|--------------|--------|----------------------------------------------------------------------------------------|-------------|\n| `col`        |        | The name of the text field to process                                                  | _required_  |\n| `max_words`  |        | Maximum number of words to use for the summary                                         | `10`        |\n| `pred_name`  |        | A character vector with the name of the new column where the prediction will be placed | `'summary'` |\n| `additional` |        | Inserts this text into the prompt sent to the LLM                                      | `''`        |\n\n### translate { #mall.MallFrame.translate }\n\n`MallFrame.translate(col, language='', additional='', pred_name='translation')`\n\nTranslate text into another language.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                            | Default         |\n|--------------|--------|----------------------------------------------------------------------------------------|-----------------|\n| `col`        |        | The name of the text field to process                                                  | _required_      |\n| `language`   |        | The target language to translate to. For example 'French'.                             | `''`            |\n| `pred_name`  |        | A character vector with the name of the new column where the prediction will be placed | `'translation'` |\n| `additional` |        | Inserts this text into the prompt sent to the LLM                                      | `''`            |\n\n",
    "supporting": [
      "MallFrame_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}