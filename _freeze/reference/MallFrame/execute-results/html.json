{
  "hash": "f5447acc19534ec27fa50e74b9941e8c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: MallFrame\n---\n\n\n\n`MallFrame(self, df)`\n\nExtension to Polars that add ability to use\nan LLM to run batch predictions over a data frame\n\nLoads the neede libraries, and sets up the review\ndata frame that will be used in the examples below:\n\n\n::: {#b36edecf .cell execution_count=1}\n``` {.python .cell-code}\nimport mall\nimport polars as pl\npl.Config(fmt_str_lengths=100)\ndata = mall.MallData\nreviews = data.reviews\nreviews.llm.use(options = dict(seed = 100))\n```\n:::\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [classify](#mall.MallFrame.classify) | Classify text into specific categories. |\n| [custom](#mall.MallFrame.custom) | Provide the full prompt that the LLM will process. |\n| [extract](#mall.MallFrame.extract) | Pull a specific label from the text. |\n| [sentiment](#mall.MallFrame.sentiment) | Use an LLM to run a sentiment analysis |\n| [summarize](#mall.MallFrame.summarize) | Summarise the text down to a specific number of words. |\n| [translate](#mall.MallFrame.translate) | Translate text into another language. |\n| [use](#mall.MallFrame.use) | Define the model, backend, and other options to use to |\n\n### classify { #mall.MallFrame.classify }\n\n`MallFrame.classify(col, labels='', additional='', pred_name='classify')`\n\nClassify text into specific categories.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                                                             | Default      |\n|--------------|--------|-------------------------------------------------------------------------------------------------------------------------|--------------|\n| `col`        | str    | The name of the text field to process                                                                                   | _required_   |\n| `labels`     | list   | A list or a DICT object that defines the categories to classify the text as. It will return one of the provided labels. | `''`         |\n| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed                                  | `'classify'` |\n| `additional` | str    | Inserts this text into the prompt sent to the LLM                                                                       | `''`         |\n\n#### Examples\n\n::: {#52708c68 .cell execution_count=2}\n``` {.python .cell-code}\nreviews.llm.classify(\"review\", [\"appliance\", \"computer\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>classify</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;appliance&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#343792fe .cell execution_count=3}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.classify(\"review\", [\"appliance\", \"computer\"], pred_name=\"prod_type\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>prod_type</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;computer&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;appliance&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#ec352216 .cell execution_count=4}\n``` {.python .cell-code}\n#Pass a DICT to set custom values for each classification\nreviews.llm.classify(\"review\", {\"appliance\" : \"1\", \"computer\" : \"2\"})\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>classify</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;1&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;2&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;1&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### custom { #mall.MallFrame.custom }\n\n`MallFrame.custom(col, prompt='', valid_resps='', pred_name='custom')`\n\nProvide the full prompt that the LLM will process.\n\n#### Parameters\n\n| Name        | Type   | Description                                                                            | Default    |\n|-------------|--------|----------------------------------------------------------------------------------------|------------|\n| `col`       | str    | The name of the text field to process                                                  | _required_ |\n| `prompt`    | str    | The prompt to send to the LLM along with the `col`                                     | `''`       |\n| `pred_name` | str    | A character vector with the name of the new column where the prediction will be placed | `'custom'` |\n\n### extract { #mall.MallFrame.extract }\n\n`MallFrame.extract(col, labels='', additional='', pred_name='extract')`\n\nPull a specific label from the text.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                            | Default     |\n|--------------|--------|----------------------------------------------------------------------------------------|-------------|\n| `col`        | str    | The name of the text field to process                                                  | _required_  |\n| `labels`     | list   | A list or a DICT object that defines tells the LLM what to look for and return         | `''`        |\n| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed | `'extract'` |\n| `additional` | str    | Inserts this text into the prompt sent to the LLM                                      | `''`        |\n\n#### Examples\n\n::: {#37d05f47 .cell execution_count=5}\n``` {.python .cell-code}\n# Use 'labels' to let the function know what to extract\nreviews.llm.extract(\"review\", labels = \"product\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>extract</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#95ef423f .cell execution_count=6}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.extract(\"review\", \"product\", pred_name = \"prod\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>prod</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#866fcd45 .cell execution_count=7}\n``` {.python .cell-code}\n# Pass a vector to request multiple things, the results will be pipe delimeted\n# in a single column\nreviews.llm.extract(\"review\", [\"product\", \"feelings\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>extract</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;tv | great&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop|frustration&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;washing machine | confusion&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### sentiment { #mall.MallFrame.sentiment }\n\n`MallFrame.sentiment(col, options=['positive', 'negative', 'neutral'], additional='', pred_name='sentiment')`\n\nUse an LLM to run a sentiment analysis\n\n#### Parameters\n\n| Name         | Type         | Description                                                                            | Default                               |\n|--------------|--------------|----------------------------------------------------------------------------------------|---------------------------------------|\n| `col`        | str          | The name of the text field to process                                                  | _required_                            |\n| `options`    | list or dict | A list of the sentiment options to use, or a named DICT object                         | `['positive', 'negative', 'neutral']` |\n| `pred_name`  | str          | A character vector with the name of the new column where the prediction will be placed | `'sentiment'`                         |\n| `additional` | str          | Inserts this text into the prompt sent to the LLM                                      | `''`                                  |\n\n#### Examples\n\n::: {#166bfe57 .cell execution_count=8}\n``` {.python .cell-code}\nreviews.llm.sentiment(\"review\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;neutral&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#3ad23b0a .cell execution_count=9}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.sentiment(\"review\", pred_name=\"review_sentiment\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>review_sentiment</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;neutral&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#488dceec .cell execution_count=10}\n``` {.python .cell-code}\n# Pass custom sentiment options\nreviews.llm.sentiment(\"review\", [\"positive\", \"negative\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;positive&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;negative&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;negative&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#eab54bdc .cell execution_count=11}\n``` {.python .cell-code}\n# Use a DICT object to specify values to return per sentiment\nreviews.llm.sentiment(\"review\", {\"positive\" : \"1\", \"negative\" : \"0\"})\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>sentiment</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;1&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;0&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;0&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### summarize { #mall.MallFrame.summarize }\n\n`MallFrame.summarize(col, max_words=10, additional='', pred_name='summary')`\n\nSummarise the text down to a specific number of words.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                            | Default     |\n|--------------|--------|----------------------------------------------------------------------------------------|-------------|\n| `col`        | str    | The name of the text field to process                                                  | _required_  |\n| `max_words`  | int    | Maximum number of words to use for the summary                                         | `10`        |\n| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed | `'summary'` |\n| `additional` | str    | Inserts this text into the prompt sent to the LLM                                      | `''`        |\n\n#### Examples\n\n::: {#deaa4711 .cell execution_count=12}\n``` {.python .cell-code}\n# Use max_words to set the maximum number of words to use for the summary\nreviews.llm.summarize(\"review\", max_words = 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>summary</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;great tv with good features&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop purchase was a mistake&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;feeling uncertain about new purchase&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#565e0fe2 .cell execution_count=13}\n``` {.python .cell-code}\n# Use 'pred_name' to customize the new column's name\nreviews.llm.summarize(\"review\", 5, pred_name = \"review_summary\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>review_summary</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;great tv with good features&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;laptop purchase was a mistake&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;feeling uncertain about new purchase&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### translate { #mall.MallFrame.translate }\n\n`MallFrame.translate(col, language='', additional='', pred_name='translation')`\n\nTranslate text into another language.\n\n#### Parameters\n\n| Name         | Type   | Description                                                                            | Default         |\n|--------------|--------|----------------------------------------------------------------------------------------|-----------------|\n| `col`        | str    | The name of the text field to process                                                  | _required_      |\n| `language`   | str    | The target language to translate to. For example 'French'.                             | `''`            |\n| `pred_name`  | str    | A character vector with the name of the new column where the prediction will be placed | `'translation'` |\n| `additional` | str    | Inserts this text into the prompt sent to the LLM                                      | `''`            |\n\n#### Examples\n\n::: {#e522d933 .cell execution_count=14}\n``` {.python .cell-code}\nreviews.llm.translate(\"review\", \"spanish\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>translation</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;Esta ha sido la mejor televisión que he utilizado hasta ahora. Gran pantalla y sonido.&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;Me arrepiento de comprar este portátil. Es demasiado lento y la tecla es demasiado ruidosa.&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;No estoy seguro de cómo sentirme con mi nueva lavadora. Un color maravilloso, pero muy difícil de en…</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {#19210e07 .cell execution_count=15}\n``` {.python .cell-code}\nreviews.llm.translate(\"review\", \"french\")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>review</th><th>translation</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;This has been the best TV I&#x27;ve ever used. Great screen, and sound.&quot;</td><td>&quot;Ceci était la meilleure télévision que j&#x27;ai jamais utilisée. Écran et son excellent.&quot;</td></tr><tr><td>&quot;I regret buying this laptop. It is too slow and the keyboard is too noisy&quot;</td><td>&quot;Je me regrette d&#x27;avoir acheté ce portable. Il est trop lent et le clavier fait trop de bruit.&quot;</td></tr><tr><td>&quot;Not sure how to feel about my new washing machine. Great color, but hard to figure&quot;</td><td>&quot;Je ne sais pas comment réagir à mon nouveau lave-linge. Couleur superbe, mais difficile à comprendre…</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### use { #mall.MallFrame.use }\n\n`MallFrame.use(backend='', model='', _cache='_mall_cache', **kwargs)`\n\nDefine the model, backend, and other options to use to\ninteract with the LLM.\n\n#### Parameters\n\n| Name       | Type   | Description                                                                                                                                            | Default         |\n|------------|--------|--------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|\n| `backend`  | str    | The name of the backend to use. At the beginning of the session it defaults to \"ollama\". If passing `\"\"`, it will remain unchanged                     | `''`            |\n| `model`    | str    | The name of the model tha the backend should use. At the beginning of the session it defaults to \"llama3.2\". If passing `\"\"`, it will remain unchanged | `''`            |\n| `_cache`   | str    | The path of where to save the cached results. Passing `\"\"` disables the cache                                                                          | `'_mall_cache'` |\n| `**kwargs` |        | Arguments to pass to the downstream Python call. In this case, the `chat` function in `ollama`                                                         | `{}`            |\n\n#### Examples\n\n::: {#8b911a3e .cell execution_count=16}\n``` {.python .cell-code}\n# Additional arguments will be passed 'as-is' to the\n# downstream R function in this example, to ollama::chat()\nreviews.llm.use(\"ollama\", \"llama3.2\", seed = 100, temp = 0.1)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n{'backend': 'ollama',\n 'model': 'llama3.2',\n '_cache': '_mall_cache',\n 'options': {'seed': 100},\n 'seed': 100,\n 'temp': 0.1}\n```\n:::\n:::\n\n\n::: {#48055e73 .cell execution_count=17}\n``` {.python .cell-code}\n# During the Python session, you can change any argument\n# individually and it will retain all of previous\n# arguments used\nreviews.llm.use(temp = 0.3)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n{'backend': 'ollama',\n 'model': 'llama3.2',\n '_cache': '_mall_cache',\n 'options': {'seed': 100},\n 'seed': 100,\n 'temp': 0.3}\n```\n:::\n:::\n\n\n::: {#673912ed .cell execution_count=18}\n``` {.python .cell-code}\n# Use _cache to modify the target folder for caching\nreviews.llm.use(_cache = \"_my_cache\")\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n{'backend': 'ollama',\n 'model': 'llama3.2',\n '_cache': '_my_cache',\n 'options': {'seed': 100},\n 'seed': 100,\n 'temp': 0.3}\n```\n:::\n:::\n\n\n::: {#335a18b1 .cell execution_count=19}\n``` {.python .cell-code}\n# Leave _cache empty to turn off this functionality\nreviews.llm.use(_cache = \"\")\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n{'backend': 'ollama',\n 'model': 'llama3.2',\n '_cache': '',\n 'options': {'seed': 100},\n 'seed': 100,\n 'temp': 0.3}\n```\n:::\n:::\n\n\n",
    "supporting": [
      "MallFrame_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}